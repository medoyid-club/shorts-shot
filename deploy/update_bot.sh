#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram-to-YouTube Shorts –±–æ—Ç–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_DIR="/home/dzianis/shorts-shot"
SERVICE_NAME="telegram-shorts.service"
BACKUP_DIR="/home/dzianis/bot_backups"
VENV_PATH="$BOT_DIR/.venv"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "ü§ñ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram-to-YouTube Shorts –±–æ—Ç–∞"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  $0 update    - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ —Å git –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "  $0 restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  $0 status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo "  $0 logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  $0 backup    - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"
    echo "  $0 rollback  - –û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±—ç–∫–∞–ø—É"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    if [ ! -d "$BOT_DIR" ]; then
        log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $BOT_DIR"
        exit 1
    fi
    
    if [ ! -f "$BOT_DIR/main_script.py" ]; then
        log_error "main_script.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $BOT_DIR"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    log "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
    
    mkdir -p "$BACKUP_DIR"
    
    BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
    BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø (–∏—Å–∫–ª—é—á–∞—è .git, logs, outputs, venv)
    rsync -av --exclude='.git' --exclude='logs' --exclude='outputs' --exclude='.venv' \
          --exclude='__pycache__' --exclude='*.pyc' --exclude='state' \
          "$BOT_DIR/" "$BACKUP_PATH/"
    
    log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_PATH"
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
    (cd "$BACKUP_DIR" && ls -t | tail -n +11 | xargs -r rm -rf)
    
    echo "$BACKUP_NAME" > "$BACKUP_DIR/latest_backup"
}

# –û—Ç–∫–∞—Ç –∫ –±—ç–∫–∞–ø—É
rollback() {
    log "üîÑ –û—Ç–∫–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±—ç–∫–∞–ø—É..."
    
    if [ ! -f "$BACKUP_DIR/latest_backup" ]; then
        log_error "–§–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    LATEST_BACKUP=$(cat "$BACKUP_DIR/latest_backup")
    BACKUP_PATH="$BACKUP_DIR/$LATEST_BACKUP"
    
    if [ ! -d "$BACKUP_PATH" ]; then
        log_error "–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: $BACKUP_PATH"
        exit 1
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
    sudo systemctl stop "$SERVICE_NAME" || true
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ .env, token.json, logs, .git)
    log "üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    rsync -av --exclude='.env' --exclude='token.json' --exclude='logs' \
          --exclude='outputs' --exclude='state' --exclude='.git' \
          "$BACKUP_PATH/" "$BOT_DIR/"
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    log "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
    sudo systemctl start "$SERVICE_NAME"
    
    log_success "–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å git
update_from_git() {
    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å Git..."
    
    cd "$BOT_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
    if [ ! -d ".git" ]; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
        exit 1
    fi
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π commit
    CURRENT_COMMIT=$(git rev-parse HEAD)
    log "üìç –¢–µ–∫—É—â–∏–π commit: ${CURRENT_COMMIT:0:8}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    log "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    git fetch origin
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    REMOTE_COMMIT=$(git rev-parse origin/main)
    if [ "$CURRENT_COMMIT" = "$REMOTE_COMMIT" ]; then
        log_success "–ë–æ—Ç —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
        return 0
    fi
    
    log "üìã –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã:"
    git log --oneline "$CURRENT_COMMIT..$REMOTE_COMMIT"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    create_backup
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ backup
    cd "$BOT_DIR"
    log "üìÇ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–æ—Ç–∞: $(pwd)"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
    sudo systemctl stop "$SERVICE_NAME" || true
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    log "‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ git reset
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
    if [ -d ".git" ]; then
        log "‚úÖ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        log "‚ùå .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PWD
    log "üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    
    git reset --hard origin/main
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if git diff --name-only "$CURRENT_COMMIT" HEAD | grep -q "requirements.txt"; then
        log "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        source "$VENV_PATH/bin/activate"
        pip install -r requirements.txt
    fi
    
    NEW_COMMIT=$(git rev-parse HEAD)
    log "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ commit: ${NEW_COMMIT:0:8}"
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    log "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
    sudo systemctl start "$SERVICE_NAME"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    sleep 3
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        log_success "–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞"
        sudo systemctl status "$SERVICE_NAME" --no-pager
        return 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    log "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:"
    echo ""
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        log_success "–°–µ—Ä–≤–∏—Å: –∞–∫—Ç–∏–≤–µ–Ω"
    else
        log_error "–°–µ—Ä–≤–∏—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    # Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cd "$BOT_DIR"
    if [ -d ".git" ]; then
        CURRENT_COMMIT=$(git rev-parse HEAD)
        BRANCH=$(git branch --show-current)
        echo "üìç Git branch: $BRANCH"
        echo "üìç Commit: ${CURRENT_COMMIT:0:8}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        git fetch origin --quiet
        REMOTE_COMMIT=$(git rev-parse origin/main)
        if [ "$CURRENT_COMMIT" != "$REMOTE_COMMIT" ]; then
            log_warning "–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        else
            log_success "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"
        fi
    fi
    
    # –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞
    echo ""
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
    sudo journalctl -u "$SERVICE_NAME" --lines=5 --no-pager || true
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    sudo journalctl -u "$SERVICE_NAME" -f
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
restart_service() {
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
    sudo systemctl restart "$SERVICE_NAME"
    
    sleep 3
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        log_success "–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞"
        sudo systemctl status "$SERVICE_NAME" --no-pager
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_directory
    
    case "$1" in
        "update")
            update_from_git
            ;;
        "restart")
            restart_service
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "backup")
            create_backup
            ;;
        "rollback")
            rollback
            ;;
        *)
            show_help
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
