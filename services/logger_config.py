"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram-to-YouTube Shorts –±–æ—Ç–∞
"""
import logging
import logging.handlers
import os
from datetime import datetime
from pathlib import Path


def setup_logging(log_dir: str = "logs", log_level: str = "INFO") -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
    
    Args:
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
    """
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_path = Path(log_dir)
    log_path.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    numeric_level = getattr(logging, log_level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        fmt='[%(asctime)s] %(levelname)s %(name)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–º–∞–∫—Å–∏–º—É–º 10MB, —Ö—Ä–∞–Ω–∏—Ç—å 30 —Ñ–∞–π–ª–æ–≤)
    main_log_file = log_path / "bot.log"
    main_handler = logging.handlers.RotatingFileHandler(
        main_log_file,
        maxBytes=10*1024*1024,  # 10MB
        backupCount=30,
        encoding='utf-8'
    )
    main_handler.setFormatter(formatter)
    main_handler.setLevel(numeric_level)
    
    # –õ–æ–≥ —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
    error_log_file = log_path / "errors.log"
    error_handler = logging.handlers.RotatingFileHandler(
        error_log_file,
        maxBytes=5*1024*1024,   # 5MB
        backupCount=10,
        encoding='utf-8'
    )
    error_handler.setFormatter(formatter)
    error_handler.setLevel(logging.ERROR)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–¥–ª—è systemd)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(numeric_level)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(numeric_level)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ handlers
    root_logger.handlers.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º handlers
    root_logger.addHandler(main_handler)
    root_logger.addHandler(error_handler)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    loggers_config = {
        'httpx': logging.WARNING,           # –°–Ω–∏–∂–∞–µ–º verbose HTTP –ª–æ–≥–∏
        'telethon': logging.INFO,
        'googleapiclient': logging.WARNING,
        'moviepy': logging.WARNING,
        'PIL': logging.WARNING,
    }
    
    for logger_name, level in loggers_config.items():
        logger = logging.getLogger(logger_name)
        logger.setLevel(level)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger = logging.getLogger("logger_config")
    logger.info(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —É—Ä–æ–≤–µ–Ω—å={log_level}, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è={log_path.absolute()}")
    logger.info(f"üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {main_log_file}")
    logger.info(f"üö® –õ–æ–≥ –æ—à–∏–±–æ–∫: {error_log_file}")


def log_system_info():
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger = logging.getLogger("system")
    
    try:
        import platform
        import psutil
        
        logger.info("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        logger.info(f"   OS: {platform.system()} {platform.release()}")
        logger.info(f"   Python: {platform.python_version()}")
        logger.info(f"   CPU: {psutil.cpu_count()} —è–¥–µ—Ä")
        logger.info(f"   RAM: {psutil.virtual_memory().total // (1024**3)} GB")
        logger.info(f"   –î–∏—Å–∫: {psutil.disk_usage('/').free // (1024**3)} GB —Å–≤–æ–±–æ–¥–Ω–æ")
        
    except ImportError:
        logger.info("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


def log_config_info(config: dict):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    logger = logging.getLogger("config")
    
    logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ ConfigParser
    try:
        llm_model = config['LLM']['gemini_model'] if 'LLM' in config and 'gemini_model' in config['LLM'] else 'N/A'
        video_duration = config['VIDEO']['duration_seconds'] if 'VIDEO' in config and 'duration_seconds' in config['VIDEO'] else 'N/A'
        video_width = config['VIDEO']['width'] if 'VIDEO' in config and 'width' in config['VIDEO'] else 'N/A'
        video_height = config['VIDEO']['height'] if 'VIDEO' in config and 'height' in config['VIDEO'] else 'N/A'
        youtube_category = config['YOUTUBE']['category_id'] if 'YOUTUBE' in config and 'category_id' in config['YOUTUBE'] else 'N/A'
        youtube_privacy = config['YOUTUBE']['privacy_status'] if 'YOUTUBE' in config and 'privacy_status' in config['YOUTUBE'] else 'N/A'
        
        logger.info(f"   –ú–æ–¥–µ–ª—å LLM: {llm_model}")
        logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_duration}—Å")
        logger.info(f"   –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {video_width}x{video_height}")
        logger.info(f"   YouTube –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {youtube_category}")
        logger.info(f"   YouTube —Å—Ç–∞—Ç—É—Å: {youtube_privacy}")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∞: {e}")


def create_log_viewer_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    script_content = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞

LOG_DIR="logs"

show_help() {
    echo "üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
    echo "  ./view_logs.sh live    - –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  ./view_logs.sh errors  - –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"
    echo "  ./view_logs.sh today   - –õ–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    echo "  ./view_logs.sh last    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫"
    echo "  ./view_logs.sh grep PATTERN - –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"
    echo ""
}

case "$1" in
    "live")
        echo "üì∫ –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
        tail -f $LOG_DIR/bot.log
        ;;
    "errors")
        echo "üö® –û—à–∏–±–∫–∏:"
        cat $LOG_DIR/errors.log 2>/dev/null || echo "–§–∞–π–ª –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ;;
    "today")
        echo "üìÖ –õ–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:"
        TODAY=$(date +%Y-%m-%d)
        grep "$TODAY" $LOG_DIR/bot.log 2>/dev/null || echo "–õ–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        ;;
    "last")
        echo "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫:"
        tail -n 100 $LOG_DIR/bot.log 2>/dev/null || echo "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ;;
    "grep")
        if [ -z "$2" ]; then
            echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞"
            exit 1
        fi
        echo "üîç –ü–æ–∏—Å–∫ '$2' –≤ –ª–æ–≥–∞—Ö:"
        grep -i "$2" $LOG_DIR/bot.log 2>/dev/null || echo "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        ;;
    *)
        show_help
        ;;
esac
'''
    
    with open('view_logs.sh', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod('view_logs.sh', 0o755)
    
    logger = logging.getLogger("logger_config")
    logger.info("üìú –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: ./view_logs.sh")
