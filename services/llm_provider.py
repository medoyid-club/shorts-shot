from __future__ import annotations

import asyncio
import json
import logging
import os
import re
import time
from dataclasses import dataclass
from datetime import datetime, timezone, timedelta
from typing import Any, Dict

from google import genai
from google.api_core import retry

logger = logging.getLogger("llm")

# –£–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
# SAFETY_SETTINGS = None

def _get_pacific_midnight_timestamp() -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª—É–Ω–æ—á–∏ –ø–æ –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    # –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è: UTC-8 (PST) –∏–ª–∏ UTC-7 (PDT)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º PST –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ (UTC-8)
    pacific_tz = timezone(timedelta(hours=-8))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–º –ø–æ—è—Å–µ
    now_pacific = datetime.now(pacific_tz)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    midnight_pacific = now_pacific.replace(hour=0, minute=0, second=0, microsecond=0)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp –ø–æ–ª—É–Ω–æ—á–∏ (–µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏)
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ –ø–æ–ª—É–Ω–æ—á–∏, —Ç–æ –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –ø–æ–ª–Ω–æ—á—å
    return midnight_pacific.timestamp()

def create_llm_provider(config: dict) -> "GeminiProvider":
    primary_key = os.getenv('GEMINI_API_KEY', '')
    backup_key = os.getenv('GEMINI_API_KEY_BACKUP', '')
    third_key = os.getenv('GEMINI_API_KEY_OTHER_BACKUP', '')
    fourth_key = os.getenv('GEMINI_API_KEY_BILLING', '')
    return GeminiProvider(
        api_key=primary_key,
        backup_api_key=backup_key,
        third_api_key=third_key,
        fourth_api_key=fourth_key,
        model=config['LLM'].get('gemini_model', 'gemini-2.0-flash')
    )


@dataclass
class GeminiProvider:
    api_key: str
    backup_api_key: str = ''
    third_api_key: str = ''
    fourth_api_key: str = ''
    model: str = 'gemini-2.0-flash'
    current_api_key: str = ''  # –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
    used_keys: list = None  # –°–ø–∏—Å–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    exhausted_keys_timestamp: dict = None  # –í—Ä–µ–º—è –∫–æ–≥–¥–∞ –∫–ª—é—á–∏ –±—ã–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    last_quota_reset_check: float = None  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç—ã
    
    def __post_init__(self):
        self.current_api_key = self.api_key
        self.used_keys = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        self.exhausted_keys_timestamp = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º timestamps –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        self.last_quota_reset_check = time.time()
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry –¥–ª—è Gemini API
        self._setup_retry()
    
    def _setup_retry(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è Gemini API"""
        def is_retriable(exception):
            if hasattr(exception, 'code'):
                return exception.code in {429, 503}  # Quota exceeded, Service unavailable
            return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º retry –∫ –º–µ—Ç–æ–¥—É generate_content
        if hasattr(genai.models.Models, 'generate_content'):
            original_method = genai.models.Models.generate_content
            retried_method = retry.Retry(
                predicate=is_retriable,
                initial=1.0,    # –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 1 —Å–µ–∫
                maximum=30.0,   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 30 —Å–µ–∫
                multiplier=2.0, # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                deadline=60.0   # –æ–±—â–∏–π timeout 1 –º–∏–Ω—É—Ç–∞
            )(original_method)
            genai.models.Models.generate_content = retried_method
            logger.info("‚úÖ Retry –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Gemini API (timeout: 60s)")

    def _get_client(self) -> genai.Client:
        if not self.current_api_key:
            raise RuntimeError("GEMINI_API_KEY is not set in the environment")
        
        return genai.Client(api_key=self.current_api_key)
    
    def _switch_to_next_key(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á"""
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π
        available_keys = [
            (self.api_key, "–æ—Å–Ω–æ–≤–Ω–æ–π"),
            (self.backup_api_key, "—Ä–µ–∑–µ—Ä–≤–Ω—ã–π"), 
            (self.third_api_key, "—Ç—Ä–µ—Ç–∏–π"),
            (self.fourth_api_key, "—á–µ—Ç–≤–µ—Ä—Ç—ã–π (—Å –±–∏–ª–ª–∏–Ω–≥–æ–º)")
        ]
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.info(f"üîç –¢–µ–∫—É—â–∏–π –∫–ª—é—á: {self.current_api_key[:10]}...")
        logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏: {[k[:10] + '...' for k in self.used_keys]}")
        logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:")
        for key, name in available_keys:
            status = "‚úÖ" if key else "‚ùå"
            logger.info(f"   {status} {name}: {key[:10] + '...' if key else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ü–ï–†–ï–î –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
        if self.current_api_key and self.current_api_key not in self.used_keys:
            self.used_keys.append(self.current_api_key)
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –¥–ª—è –∫–≤–æ—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (1 —á–∞—Å)
            self.exhausted_keys_timestamp[self.current_api_key] = time.time()
            logger.info(f"üö´ –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (–∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        for key, name in available_keys:
            if key and key not in self.used_keys:
                if "–±–∏–ª–ª–∏–Ω–≥–æ–º" in name:
                    logger.warning(f"üí≥ –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ {name} - –ü–õ–ê–¢–ù–´–ô API!")
                else:
                    logger.warning(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ {name} Gemini API –∫–ª—é—á")
                self.current_api_key = key
                return True
        
        logger.error("‚ùå –í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
        return False
    
    def _check_and_reset_quota(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–≤–æ—Ç—É, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –ø–æ–ª–Ω–æ—á—å –ø–æ –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        pacific_midnight = _get_pacific_midnight_timestamp()
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–≤–æ—Ç—ã
        if self.last_quota_reset_check < pacific_midnight:
            logger.info("üåÖ –ü–æ–ª–Ω–æ—á—å –ø–æ –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–≤–æ—Ç—ã –≤—Å–µ—Ö –∫–ª—é—á–µ–π!")
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            restored_count = len(self.exhausted_keys_timestamp)
            self.exhausted_keys_timestamp.clear()
            self.used_keys.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–ª—é—á—É
            self.current_api_key = self.api_key
            self.last_quota_reset_check = time.time()
            
            if restored_count > 0:
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} API –∫–ª—é—á–µ–π –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç—ã")
                logger.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–ª—é—á—É")
            
            return True
        return False
    
    def reset_for_new_message(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ –ø–æ–ª–Ω–æ—á—å –ø–æ –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if self._check_and_reset_quota():
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –ø–æ–ª–Ω–æ—á—å, –≤—Å–µ –∫–ª—é—á–∏ —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª–Ω–æ—á—å –Ω–µ –ø—Ä–æ—à–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å —á–∞—Å–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        current_time = time.time()
        quota_reset_hours = 1  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
        keys_to_restore = []
        for key, timestamp in list(self.exhausted_keys_timestamp.items()):
            if current_time - timestamp > quota_reset_hours * 3600:  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                keys_to_restore.append(key)
                
        for key in keys_to_restore:
            del self.exhausted_keys_timestamp[key]
            if key in self.used_keys:
                self.used_keys.remove(key)
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á {key[:10]}... (–ø—Ä–æ—à–ª–æ >1 —á–∞—Å–∞)")
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.api_key and self.api_key not in self.used_keys:
            self.current_api_key = self.api_key
            logger.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–ª—é—á—É")
        else:
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
            available_keys = [
                (self.api_key, "–æ—Å–Ω–æ–≤–Ω–æ–π"),
                (self.backup_api_key, "—Ä–µ–∑–µ—Ä–≤–Ω—ã–π"), 
                (self.third_api_key, "—Ç—Ä–µ—Ç–∏–π"),
                (self.fourth_api_key, "—á–µ—Ç–≤–µ—Ä—Ç—ã–π (—Å –±–∏–ª–ª–∏–Ω–≥–æ–º)")
            ]
            
            for key, name in available_keys:
                if key and key not in self.used_keys:
                    self.current_api_key = key
                    if "–±–∏–ª–ª–∏–Ω–≥–æ–º" in name:
                        logger.warning(f"üí≥ –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ {name} –∫–ª—é—á–µ")
                    else:
                        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º {name} –∫–ª—é—á")
                    break
    
    async def _generate_with_fallback(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å fallback –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π API –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–≤–æ—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._check_and_reset_quota()
        
        logger.info("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å Gemini API...")
        logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á: {self.current_api_key[:10]}... (–ø–æ–ø—ã—Ç–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º)")
        
        for attempt in range(4):  # –ú–∞–∫—Å–∏–º—É–º 4 –ø–æ–ø—ã—Ç–∫–∏ (–¥–ª—è 4-—Ö –∫–ª—é—á–µ–π)
            try:
                client = self._get_client()
                logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/4)...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                resp = await asyncio.wait_for(
                    asyncio.to_thread(
                        client.models.generate_content,
                        model=self.model,
                        contents=prompt,
                    ),
                    timeout=45.0  # 45 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                )
                
                result = getattr(resp, 'text', str(resp))
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                return result
                
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                if attempt < 3 and self._switch_to_next_key():
                    logger.info("üí´ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥—Ä—É–≥–∏–º API –∫–ª—é—á–æ–º...")
                    continue
                    
            except Exception as e:
                error_msg = str(e)
                is_quota_error = ('429' in error_msg or 'quota' in error_msg.lower() or 
                                'RESOURCE_EXHAUSTED' in error_msg)
                
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                if is_quota_error and attempt < 3:
                    if self._switch_to_next_key():
                        logger.info("üí´ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥—Ä—É–≥–∏–º API –∫–ª—é—á–æ–º...")
                        continue
                    else:
                        logger.error("‚ùå –ù–µ—Ç –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è fallback")
                
                if attempt == 3:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    raise
            
        return ""

    def _strip(self, text: str) -> str:
        return (text or "").strip()

    def _normalize_summary(self, text: str) -> str:
        t = (text or "").strip()
        # Replace unicode ellipsis with dots and remove trailing ellipses
        t = t.replace("‚Ä¶", "...")
        while t.endswith("..."):
            t = t[:-3].rstrip()
        # Ensure ending punctuation
        if t and t[-1] not in ".!?":
            t = t + "."
        return t

    async def _translate_to_uk(self, text: str) -> str:
        if not text:
            return ""
        prompt = (
            "TASK: Translate to Ukrainian (modern, natural Ukrainian).\n\n"
            "RULES:\n"
            "- Use modern Ukrainian vocabulary\n"
            "- Keep the same tone and energy\n"
            "- Preserve length as much as possible\n"
            "- For news: use journalism style\n"
            "- For titles: keep clickbait energy\n"
            "- NO Russian words or phrases\n"
            "- Return ONLY the translation\n\n"
            f"ENGLISH TEXT:\n{text}\n\n"
            "UKRAINIAN:"
        )
        response_text = await self._generate_with_fallback(prompt)
        return self._strip(response_text)

    async def _translate_tags_to_uk(self, tags: list[str]) -> list[str]:
        if not tags:
            return []
        prompt = (
            "TASK: Translate YouTube tags to Ukrainian.\n\n"
            "RULES:\n"
            "- Keep 1-2 words maximum per tag\n"
            "- Use common, searchable words\n"
            "- For names: keep original (Putin = –ü—É—Ç—ñ–Ω, Trump = –¢—Ä–∞–º–ø)\n"
            "- For countries: use Ukrainian names (Russia = –†–æ—Å—ñ—è, America = –ê–º–µ—Ä–∏–∫–∞)\n"
            "- For topics: use popular Ukrainian terms\n"
            "- Return JSON array only\n\n"
            f"ENGLISH TAGS: {json.dumps(tags, ensure_ascii=False)}\n\n"
            "UKRAINIAN JSON:"
        )
        raw = await self._generate_with_fallback(prompt)
        try:
            data = json.loads(raw)
            if isinstance(data, list):
                return [self._strip(str(x)) for x in data if self._strip(str(x))]
        except Exception:
            pass
        # fallback: simple per-word translate in one go
        text = await self._translate_to_uk(
            ", ".join(tags)
        )
        return [self._strip(t) for t in re.split(r",|\n", text) if self._strip(t)]

    async def summarize_for_video(self, source_text: str) -> str:
        # Step 1: –¥–µ–ª–∞–µ–º —á–∏—Å—Ç–æ–µ –∞–Ω–≥–ª. —Ä–µ–∑—é–º–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        prompt_en = (
            "TASK: Create a video text summary for YouTube Shorts (Ukrainian news).\n"
            "RULES:\n"
            "- Maximum 180 characters total\n"
            "- Complete sentences only (no cut-offs, no ...)\n"
            "- Direct, engaging tone\n"
            "- Present tense where possible\n"
            "- No intro phrases like 'this is about' or 'the news says'\n"
            "- No hashtags, no links\n"
            "- Must end with proper punctuation (. ! ?)\n\n"
            "EXAMPLES:\n"
            "- 'Bitcoin hits new record above $95,000 as investors expect crypto-friendly policies.'\n"
            "- 'Ukrainian forces advance 3km near Bakhmut despite heavy resistance.'\n"
            "- 'Apple announces new iPhone with AI features launching next month.'\n\n"
            f"SOURCE TEXT:\n{source_text}\n\n"
            "SUMMARY:"
        )
        summary_en = await self._generate_with_fallback(prompt_en)
        summary_en = self._strip(summary_en)
        logger.info(f"üîç LLM Summary EN: {summary_en}")
        # Step 2: –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        summary_uk = await self._translate_to_uk(summary_en)
        logger.info(f"üîç LLM Summary UK: {summary_uk}")
        result = self._normalize_summary(summary_uk)
        logger.info(f"üîç LLM Summary Final: {result}")
        return result

    async def generate_seo_package(self, source_text: str) -> Dict[str, Any]:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        prompt_en = (
            "TASK: Create YouTube Shorts SEO package for Ukrainian news content.\n\n"
            "OUTPUT FORMAT: JSON only, no explanations\n"
            "{\n"
            '  "title": "...",\n'
            '  "description": "...",\n'
            '  "tags": ["...", "..."]\n'
            "}\n\n"
            "TITLE RULES:\n"
            "- Maximum 65 characters\n"
            "- Clickbait style but factual\n"
            "- Start with action words or shocking facts\n"
            "- NO generic words like 'news', 'update', 'breaking'\n"
            "- Examples: 'Putin meets Trump at Alaska hotel', 'Bitcoin crashes 40% in single day', 'Ukraine captures Russian general'\n\n"
            "DESCRIPTION RULES:\n"
            "- 1-2 SHORT sentences maximum\n"
            "- Add context or key details not in title\n"
            "- Can be empty if title says everything\n"
            "- Include 5 relevant hashtags at the end with # symbol\n\n"
            "TAGS RULES:\n"
            "- Exactly 12-15 tags\n"
            "- Mix of: specific names, general topics, emotions, locations\n"
            "- Single words or short phrases (max 3 words)\n"
            "- NO '#' symbols\n"
            "- Include: relevant people names, countries, topics, trending keywords\n"
            "- Examples: ['putin', 'trump', 'politics', 'russia', 'america', 'meeting', 'diplomacy', 'world news', 'leadership', 'international', 'alaska', 'summit']\n\n"
            f"SOURCE TEXT:\n{source_text}\n\n"
            "JSON:"
        )
        raw = await self._generate_with_fallback(prompt_en)
        logger.info(f"üîç LLM SEO Raw Response: {raw}")
        data = _extract_json(raw)
        logger.info(f"üîç LLM SEO Parsed JSON: {data}")
        if not isinstance(data, dict):
            raise ValueError("SEO JSON is not an object")
        data.setdefault('title', '')
        data.setdefault('description', '')
        tags = data.get('tags', [])
        if isinstance(tags, str):
            tags = [t.strip() for t in tags.split(',') if t.strip()]
        logger.info(f"üîç LLM SEO EN - Title: {data.get('title')}, Tags: {tags}")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫—Ä., —Ç–µ–≥–∏ ‚Äî —Ç–æ–∂–µ –Ω–∞ —É–∫—Ä.
        title_uk = await self._translate_to_uk(str(data.get('title', '')))
        descr_uk = await self._translate_to_uk(str(data.get('description', '')))
        tags_uk = await self._translate_tags_to_uk([str(t) for t in tags])
        logger.info(f"üîç LLM SEO UK - Title: {title_uk}, Description: {descr_uk}, Tags: {tags_uk}")
        return {'title': title_uk, 'description': descr_uk, 'tags': tags_uk}


def _extract_json(text: str) -> Any:
    try:
        return json.loads(text)
    except Exception:
        pass
    m = re.search(r"\{[\s\S]*\}", text)
    if m:
        try:
            return json.loads(m.group(0))
        except Exception:
            pass
    raise ValueError("Failed to parse JSON from LLM response")

