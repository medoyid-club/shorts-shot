"""
Twitter/X Upload Service
–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Twitter/X —á–µ—Ä–µ–∑ API v2

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. Twitter Developer Account (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
2. App credentials (API Key, Secret, Access Token)
3. tweepy –±–∏–±–ª–∏–æ—Ç–µ–∫–∞

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ (FREE)
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (FREE) 
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ (Basic $100/–º–µ—Å)
"""

import logging
import os
from pathlib import Path
from typing import Optional
import tempfile

logger = logging.getLogger("twitter")

try:
    import tweepy
    TWEEPY_AVAILABLE = True
except ImportError:
    TWEEPY_AVAILABLE = False
    logger.warning("üì¶ tweepy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install tweepy")


class TwitterUploader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Twitter/X."""
    
    def __init__(self, config: dict):
        self.config = config
        self.twitter_config = config.get('TWITTER', {})
        self.enabled = self.twitter_config.get('enabled', 'false').lower() == 'true'
        
        if not self.enabled:
            logger.info("üì¥ Twitter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
            
        if not TWEEPY_AVAILABLE:
            logger.error("‚ùå tweepy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –û—Ç–∫–ª—é—á–∞–µ–º Twitter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            self.enabled = False
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
        required_keys = ['api_key', 'api_secret', 'access_token', 'access_token_secret']
        missing_keys = [key for key in required_keys if not self.twitter_config.get(key)]
        
        if missing_keys:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Twitter –∫–ª—é—á–∏: {missing_keys}")
            self.enabled = False
            return
            
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitter API v2
            self.client = tweepy.Client(
                consumer_key=self.twitter_config['api_key'],
                consumer_secret=self.twitter_config['api_secret'],
                access_token=self.twitter_config['access_token'],
                access_token_secret=self.twitter_config['access_token_secret'],
                wait_on_rate_limit=True
            )
            
            # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –Ω—É–∂–µ–Ω API v1.1
            auth = tweepy.OAuth1UserHandler(
                self.twitter_config['api_key'],
                self.twitter_config['api_secret'],
                self.twitter_config['access_token'],
                self.twitter_config['access_token_secret']
            )
            self.api_v1 = tweepy.API(auth, wait_on_rate_limit=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._verify_credentials()
            logger.info("‚úÖ Twitter API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Twitter API: {e}")
            self.enabled = False
    
    def _verify_credentials(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            user = self.client.get_me()
            logger.info(f"üê¶ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{user.data.username}")
        except Exception as e:
            raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twitter: {e}")
    
    def _prepare_text(self, title: str, description: str, tags: list) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Twitter (–º–∞–∫—Å–∏–º—É–º 280 —Å–∏–º–≤–æ–ª–æ–≤)."""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = []
        for tag in tags[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–µ—à—Ç–µ–≥–æ–≤
            clean_tag = ''.join(c for c in tag if c.isalnum() or c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
            if clean_tag:
                hashtags.append(f"#{clean_tag}")
        
        hashtag_text = " ".join(hashtags)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        available_length = 280 - len(hashtag_text) - 3  # 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º title –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        main_text = title
        if len(main_text) > available_length:
            main_text = main_text[:available_length-3] + "..."
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        if hashtag_text:
            result = f"{main_text}\n\n{hashtag_text}"
        else:
            result = main_text
            
        logger.info(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è Twitter ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return result
    
    def _extract_video_frame(self, video_path: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        try:
            from moviepy import VideoFileClip
            import tempfile
            
            with VideoFileClip(video_path) as video:
                # –ë–µ—Ä–µ–º –∫–∞–¥—Ä –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –≤–∏–¥–µ–æ
                frame_time = video.duration / 2
                frame = video.get_frame(frame_time)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                from PIL import Image
                img = Image.fromarray(frame)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
                img.save(temp_file.name, quality=90)
                temp_file.close()
                
                logger.info("üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –¥–ª—è Twitter")
                return temp_file.name
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
            return None
    
    def upload_post(self, 
                   title: str, 
                   description: str = "", 
                   tags: list = None, 
                   video_path: str = None,
                   image_path: str = None) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ Twitter.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤)
            tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç Basic –ø–ª–∞–Ω $100/–º–µ—Å)
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        """
        if not self.enabled:
            logger.warning("üì¥ Twitter –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return False
            
        try:
            tags = tags or []
            text = self._prepare_text(title, description, tags)
            
            media_ids = []
            temp_files = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            upload_mode = self.twitter_config.get('upload_mode', 'image')  # 'image', 'video', 'auto'
            
            if upload_mode == 'video' and video_path and Path(video_path).exists():
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ (—Ç—Ä–µ–±—É–µ—Ç Basic –ø–ª–∞–Ω)
                try:
                    logger.info("üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ Twitter...")
                    media = self.api_v1.media_upload(video_path, media_category='tweet_video')
                    media_ids.append(media.media_id)
                    logger.info("‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä –∫–∞–∫ fallback
                    temp_image = self._extract_video_frame(video_path)
                    if temp_image:
                        temp_files.append(temp_image)
                        image_path = temp_image
                        
            if not media_ids and (upload_mode in ['image', 'auto'] or not video_path):
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                target_image = image_path
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä
                if not target_image and video_path:
                    target_image = self._extract_video_frame(video_path)
                    if target_image:
                        temp_files.append(target_image)
                
                if target_image and Path(target_image).exists():
                    try:
                        logger.info("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Twitter...")
                        media = self.api_v1.media_upload(target_image)
                        media_ids.append(media.media_id)
                        logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            logger.info("üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ Twitter...")
            
            tweet_kwargs = {'text': text}
            if media_ids:
                tweet_kwargs['media_ids'] = media_ids
                
            response = self.client.create_tweet(**tweet_kwargs)
            
            if response.data:
                tweet_id = response.data['id']
                tweet_url = f"https://twitter.com/i/web/status/{tweet_id}"
                logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_url}")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for temp_file in temp_files:
                    try:
                        os.unlink(temp_file)
                    except:
                        pass
                        
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            for temp_file in temp_files:
                try:
                    os.unlink(temp_file)
                except:
                    pass
                    
            return False
    
    def get_account_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ Twitter."""
        if not self.enabled:
            return {'error': 'Twitter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞'}
            
        try:
            user = self.client.get_me(user_fields=['public_metrics'])
            return {
                'username': user.data.username,
                'name': user.data.name,
                'followers': user.data.public_metrics['followers_count'],
                'following': user.data.public_metrics['following_count'],
                'tweets': user.data.public_metrics['tweet_count']
            }
        except Exception as e:
            return {'error': str(e)}
