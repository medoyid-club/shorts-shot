from __future__ import annotations

import logging
import os
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Tuple

from PIL import Image, ImageDraw, ImageFont
import numpy as np
from moviepy import (
    ColorClip,
    CompositeVideoClip,
    ImageClip,
    VideoFileClip,
    AudioFileClip,
    concatenate_audioclips,
)
from moviepy.video.fx import Resize

from .storage import random_file

logger = logging.getLogger("video")


class VideoComposer:
    def __init__(self, config: dict):
        self.config = config
        v = config['VIDEO']
        self.width = int(v.get('width', 1080))
        self.height = int(v.get('height', 1920))
        self.duration = int(v.get('duration_seconds', 8))
        self.header_ratio = float(v.get('header_ratio', 0.4))
        self.middle_ratio = float(v.get('middle_ratio', 0.5))
        self.footer_ratio = float(v.get('footer_ratio', 0.1))
        self.middle_bg = config._parsed['VIDEO']['middle_bg_rgb']  # type: ignore[attr-defined]
        self.footer_bg = config._parsed['VIDEO']['footer_bg_rgb']  # type: ignore[attr-defined]
        self.middle_red = config._parsed['VIDEO']['middle_red_rgb']  # type: ignore[attr-defined]
        self.header_zoom_start = float(v.get('header_zoom_start', 1.05))
        self.header_zoom_end = float(v.get('header_zoom_end', 1.00))
        self.heartbeat_enabled = v.get('heartbeat_enabled', 'true').lower() == 'true'
        self.heartbeat_cycle_seconds = float(v.get('heartbeat_cycle_seconds', 1.6))
        self.heartbeat_height_ratio = float(v.get('heartbeat_height_ratio', 0.10))
        self.heartbeat_opacity_main = int(v.get('heartbeat_opacity_main', 180))
        self.heartbeat_opacity_glow = int(v.get('heartbeat_opacity_glow', 80))
        self.heartbeat_opacity_glow2 = int(v.get('heartbeat_opacity_glow2', 40))
        self.font_path = v.get('font_path', 'resources/fonts/Inter_28pt-Bold.ttf')

    def _load_font(self, size: int) -> ImageFont.FreeTypeFont | ImageFont.ImageFont:
        font_path = Path(self.font_path)
        if font_path.exists():
            try:
                font = ImageFont.truetype(str(font_path), size=size)
                logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç '{font_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (—Ä–∞–∑–º–µ—Ä {size})")
                return font
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ '{font_path}': {e}", exc_info=True)
        else:
            logger.warning(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç '{font_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")
        return ImageFont.load_default()

    def _make_header_clip(self, media_path: str | None, header_size: Tuple[int, int]):
        w, h = header_size
        logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞: {media_path}, —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞: {w}x{h}")
        
        if media_path and Path(media_path).exists():
            suffix = Path(media_path).suffix.lower()
            logger.info(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {suffix}")
            
            try:
                if suffix in {'.mp4', '.mov', '.mkv', '.avi', '.webm'}:
                    logger.info("üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
                    video_clip = VideoFileClip(media_path)
                    logger.info(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {video_clip.w}x{video_clip.h}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_clip.duration}")
                    
                    # –£–±–∏—Ä–∞–µ–º –∑–≤—É–∫
                    video_clip = video_clip.without_audio()
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É
                    if video_clip.duration > self.duration:
                        video_clip = video_clip.subclipped(0, self.duration)
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                    if video_clip.h != h:
                        scale_factor = h / video_clip.h
                        new_width = int(video_clip.w * scale_factor)
                        video_clip = video_clip.resized((new_width, h))
                        logger.info(f"üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–ª–∏ –¥–æ: {new_width}x{h}")
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
                    if video_clip.w > w:
                        x_center = video_clip.w / 2
                        video_clip = video_clip.cropped(x1=x_center - w/2, x2=x_center + w/2)
                        logger.info(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–ª–∏ –¥–æ: {w}x{h}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    final_clip = video_clip.with_duration(self.duration)
                    logger.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return self._add_header_effects(final_clip)
                    
                else:
                    logger.info("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    clip = ImageClip(media_path)
                    clip = clip.resized(height=h)
                    # crop center to width
                    x_center = clip.w/2
                    clip = clip.cropped(width=w, height=h, x_center=x_center, y_center=clip.h/2)
                    logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return self._add_header_effects(clip.with_duration(self.duration))
                    
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ (%s): %s", media_path, e, exc_info=True)

        # Fallback to random background
        logger.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Ñ–æ–Ω...")
        bg = random_file(self.config['PATHS']['backgrounds_dir'], ('.jpg', '.jpeg', '.png'))
        if bg:
            logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω: {bg}")
            try:
                clip = ImageClip(bg).resized(height=h)
                clip = clip.cropped(width=w, height=h, x_center=clip.w/2, y_center=clip.h/2)
                return self._add_header_effects(clip.with_duration(self.duration))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞ {bg}: {e}")
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π fallback –≤–º–µ—Å—Ç–æ —á—ë—Ä–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        logger.warning("üé® –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω...")
        try:
            from PIL import Image as PILImage
            # –°–æ–∑–¥–∞—ë–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç—ë–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –∫ —Ç—ë–º–Ω–æ-—Å–µ—Ä–æ–º—É
            gradient_img = PILImage.new('RGB', (w, h))
            for y in range(h):
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç –æ—Ç —Ç—ë–º–Ω–æ-—Å–∏–Ω–µ–≥–æ (25, 25, 50) –∫ —Ç—ë–º–Ω–æ-—Å–µ—Ä–æ–º—É (50, 50, 50)
                ratio = y / h
                r = int(25 + (50 - 25) * ratio)
                g = int(25 + (50 - 25) * ratio) 
                b = int(50 + (50 - 50) * ratio)
                for x in range(w):
                    gradient_img.putpixel((x, y), (r, g, b))
            
            gradient_path = Path(self.config['PATHS']['tmp_dir']) / f"gradient_{w}x{h}.png"
            gradient_img.save(gradient_path)
            clip = ImageClip(str(gradient_path))
            logger.info("‚úÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —Å–æ–∑–¥–∞–Ω")
            return self._add_header_effects(clip.with_duration(self.duration))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π –≤–º–µ—Å—Ç–æ —á—ë—Ä–Ω–æ–≥–æ
            logger.warning("üîµ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω–∏–π —Ñ–æ–Ω –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
            return self._add_header_effects(ColorClip(size=(w, h), color=(25, 25, 50)).with_duration(self.duration))

    def _render_text_image(self, text: str, size: Tuple[int, int], bg_rgb: tuple[int, int, int]) -> str:
        w, h = size
        # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –≤—Å—é —Å—Ä–µ–¥–Ω—é—é –∑–æ–Ω—É –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∫—Ä–∞—Å–Ω—ã–º (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        red_bg = tuple(self.middle_red)
        img = Image.new('RGB', (w, h), color=red_bg)
        draw = ImageDraw.Draw(img)

        # Adaptive text layout with readability-first strategy
        font_size = 80
        font = self._load_font(font_size)
        max_width = int(w * 0.86)
        max_height = int(h * 0.78)
        line_spacing = 12
        padding = 40

        def measure(ls: list[str], fnt: ImageFont.ImageFont, spacing: int) -> tuple[int, list[int]]:
            heights = [draw.textbbox((0, 0), L, font=fnt)[3] for L in ls]
            total = sum(heights) + (len(ls) - 1) * spacing
            return total, heights

        # Try to fit by decreasing font size, then spacing, then padding
        while True:
            lines = _wrap_text(draw, text, font, max_width)
            total_height, line_heights = measure(lines, font, line_spacing)
            if total_height <= max_height:
                break
            if font_size > 22:
                font_size -= 2
                font = self._load_font(font_size)
                continue
            if line_spacing > 8:
                line_spacing -= 1
                continue
            if padding > 24:
                padding -= 2
                max_height = int(h - padding * 2)
                continue
            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –æ–±—Ä–µ–∑–∫–∏) –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            break

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
        line_heights = []
        max_line_width = 0
        for line in lines:
            bbox = draw.textbbox((0, 0), line, font=font)
            line_heights.append(bbox[3])
            max_line_width = max(max_line_width, bbox[2])
        
        total_text_height = sum(line_heights) + (len(lines)-1)*line_spacing
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ —Ç–µ–∫—Å—Ç (–ø–æ–¥–ª–æ–∂–∫—É –Ω–µ —Ä–∏—Å—É–µ–º, —Ñ–æ–Ω —É–∂–µ –∫—Ä–∞—Å–Ω—ã–π)
        overlay_width = min(max_line_width + padding*2, w - 40)
        overlay_height = total_text_height + padding*2
        overlay_x = (w - overlay_width) // 2
        overlay_y = (h - overlay_height) // 2
        # –ü–æ–¥–ª–æ–∂–∫—É –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–≤–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –≤—Å–µ–π –∑–æ–Ω—ã
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–≤–æ–π–Ω–æ–π —Ç–µ–Ω—å—é –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∏–ª–ª—é–∑–∏–∏ –±–æ–ª—å—à–µ–π –∂–∏—Ä–Ω–æ—Å—Ç–∏
        y = overlay_y + padding
        for i, line in enumerate(lines):
            bbox = draw.textbbox((0, 0), line, font=font)
            line_w = bbox[2]
            x = (w - line_w) // 2
            
            # –î–≤–æ–π–Ω–∞—è —Ç–µ–Ω—å (2px –∏ 1px) —É—Å–∏–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ –≤–∏–∑—É–∞–ª—å–Ω—É—é ¬´–∂–∏—Ä–Ω–æ—Å—Ç—å¬ª
            draw.text((x+2, y+2), line, font=font, fill=(0, 0, 0))
            draw.text((x+1, y+1), line, font=font, fill=(0, 0, 0))
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), line, font=font, fill=(255, 255, 255))
            y += line_heights[i] + line_spacing

        out_path = Path(self.config['PATHS']['tmp_dir']) / f"middle_{os.getpid()}_{abs(hash(text))}.png"
        img.save(out_path)
        return str(out_path)

    async def _render_animated_text_html(self, text: str, size: Tuple[int, int], bg_rgb: tuple[int, int, int]) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ HTML/CSS/JS –≤ –≤–∏–¥–µ–æ –∫–ª–∏–ø (async Playwright)."""
        w, h = size
        
        try:
            from playwright.async_api import async_playwright
            import numpy as np
            
            # –ß–∏—Ç–∞–µ–º HTML —à–∞–±–ª–æ–Ω
            template_path = Path(self.config['PATHS']['resources_dir']) / 'text_animation_template.html'
            if not template_path.exists():
                logger.warning("HTML —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥")
                return self._render_text_image(text, size, bg_rgb)
            
            html_content = template_path.read_text(encoding='utf-8')
            html_content = html_content.replace('{{TEXT_CONTENT}}', text)
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
            temp_html = Path(self.config['PATHS']['tmp_dir']) / f"text_anim_{abs(hash(text))}.html"
            temp_html.write_text(html_content, encoding='utf-8')
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
            frames = []
            fps = 30
            animation_duration = 0.6  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            total_frames = int(fps * animation_duration)
            
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                page = await browser.new_page(viewport={'width': w, 'height': h})
                await page.goto(f"file://{temp_html.absolute()}")

                logger.info(f"üé¨ –†–µ–Ω–¥–µ—Ä–∏–º {total_frames} –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏...")

                for frame_num in range(total_frames):
                    # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
                    time_ms = int((frame_num / fps) * 1000)

                    # –ñ–¥–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                    await page.wait_for_timeout(time_ms if frame_num == 0 else int(1000 / fps))

                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    screenshot_bytes = await page.screenshot(type='png')

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
                    from PIL import Image as PILImage
                    import io
                    img = PILImage.open(io.BytesIO(screenshot_bytes))
                    frame = np.array(img)
                    frames.append(frame)

                await browser.close()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML
            temp_html.unlink(missing_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∫–ª–∏–ø –∏–∑ –∫–∞–¥—Ä–æ–≤
            from moviepy import ImageSequenceClip
            clip = ImageSequenceClip(frames, fps=fps)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop)
            out_path = Path(self.config['PATHS']['tmp_dir']) / f"text_anim_{abs(hash(text))}.mp4"
            await asyncio.to_thread(
                clip.write_videofile,
                str(out_path),
                codec='libx264',
                audio=False,
            )
            
            logger.info("‚úÖ HTML –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ –≤ –≤–∏–¥–µ–æ")
            return str(out_path)
            
        except ImportError:
            logger.warning("Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥")
            return self._render_text_image(text, size, bg_rgb)
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: %s", e)
            return self._render_text_image(text, size, bg_rgb)

    def _render_footer_image(self, left_text: str, right_text: str, size: Tuple[int, int], bg_rgb: tuple[int, int, int]) -> str:
        w, h = size
        img = Image.new('RGB', (w, h), color=bg_rgb)
        draw = ImageDraw.Draw(img)
        font = self._load_font(36)

        # Left text
        draw.text((int(w*0.03), int(h*0.2)), left_text, font=font, fill=(255,255,255))
        # Right text
        right_bbox = draw.textbbox((0,0), right_text, font=font)
        rx = w - right_bbox[2] - int(w*0.03)
        draw.text((rx, int(h*0.2)), right_text, font=font, fill=(255,255,255))

        out_path = Path(self.config['PATHS']['tmp_dir']) / f"footer_{os.getpid()}_{abs(hash(left_text+right_text))}.png"
        img.save(out_path)
        return str(out_path)

    def _add_header_effects(self, clip):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑—É–º–∞ (Ken Burns light) –∫ —à–∞–ø–∫–µ.

        –ò—Å–ø–æ–ª—å–∑—É–µ–º time-based resize: –æ—Ç 1.05 –∫ 1.00 —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –∑–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞.
        –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∏–¥–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∂–µ –∑–∞–¥–∞—ë—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        logger.info("üé¨ –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç: zoom_in –¥–ª—è header (time-based resize)")

        def zoom_resize(t: float) -> float:
            progress = 0.0 if self.duration <= 0 else min(max(t / self.duration, 0.0), 1.0)
            return self.header_zoom_start + (self.header_zoom_end - self.header_zoom_start) * progress

        return clip.resized(zoom_resize)

    def _add_text_effects(self, clip):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∫–ª–∏–ø—É."""
        logger.info("üé¨ –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç: slide_in –¥–ª—è —Ç–µ–∫—Å—Ç–∞")
        
        # –ü—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç –≤—ä–µ–∑–¥–∞ —Å–ø—Ä–∞–≤–∞ –∑–∞ –ø–µ—Ä–≤—ã–µ 0.6 —Å–µ–∫—É–Ω–¥—ã
        def animate_text_position(t):
            if t < 0.6:
                # –î–≤–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –∫ —Ü–µ–Ω—Ç—Ä—É
                progress = t / 0.6
                offset_x = int(50 * (1 - progress))  # –æ—Ç 50 –¥–æ 0 –ø–∏–∫—Å–µ–ª–µ–π
                return (offset_x, 0)
            return (0, 0)
        
        return clip.with_position(animate_text_position)

    def _make_heartbeat_overlay(self, width: int, height: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–ø —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –±–∏–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞ –ø–æ–≤–µ—Ä—Ö —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω—ã.

        –†–∏—Å—É–µ–º –≤–µ—Å—å —Å–ª–æ–π –∫–∞–¥—Ä-–∑–∞-–∫–∞–¥—Ä–æ–º, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –∏ —Ñ–æ—Ä–º–æ–π
        –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ opacity-—Ñ—É–Ω–∫—Ü–∏—è–º–∏ MoviePy.
        """
        baseline_y = height // 2
        amplitude = int(height * 0.35)
        period_px = max(20, int(width * 0.22))
        speed_px_per_s = width / max(0.2, self.heartbeat_cycle_seconds)

        def shape(u: float) -> float:
            # –§–æ—Ä–º–∞ —É–¥–∞—Ä–∞: –≤—ã—Å–æ–∫–∏–π –ø–∏–∫ + –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∏–º–ø—É–ª—å—Å
            if u < 0.06:
                return u / 0.06
            if u < 0.12:
                return 1.0 - (u - 0.06) / 0.06
            if u < 0.20:
                return 0.4 * (1.0 - (u - 0.12) / 0.08)
            return 0.0

        # –ì–æ—Ç–æ–≤–∏–º –∫–∞–¥—Ä—ã –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        fps = 30
        total_frames = max(1, int(self.duration * fps))
        frames: list[np.ndarray] = []

        for i in range(total_frames):
            t = i / fps
            img = Image.new("RGBA", (width, height), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img, 'RGBA')

            env = np.sin(np.pi * (t / max(self.duration, 0.001))) ** 2
            alpha_main = int(self.heartbeat_opacity_main * env)
            alpha_glow = int(self.heartbeat_opacity_glow * env)
            alpha_glow2 = int(self.heartbeat_opacity_glow2 * env)

            draw.line([(0, baseline_y), (width, baseline_y)], fill=(255, 255, 255, int(50 * env)), width=1)

            offset = int((t * speed_px_per_s) % period_px)
            pts = []
            step = 3
            for x in range(0, width, step):
                u = ((x + offset) % period_px) / period_px
                y = baseline_y - int(amplitude * shape(u))
                pts.append((x, y))

            if len(pts) >= 2:
                draw.line(pts, fill=(255, 255, 255, alpha_glow2), width=11)
                draw.line(pts, fill=(255, 255, 255, alpha_glow), width=7)
                draw.line(pts, fill=(255, 255, 255, alpha_main), width=3)

            frames.append(np.array(img))

        from moviepy import ImageSequenceClip
        return ImageSequenceClip(frames, fps=fps)

    async def compose(self, short_text: str, header_media_path: str | None, output_path: str, source_text: str) -> str:
        header_h = int(self.height * self.header_ratio)
        middle_h = int(self.height * self.middle_ratio)
        footer_h = self.height - header_h - middle_h

        header_clip = self._make_header_clip(header_media_path, (self.width, header_h))

        # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        # (HTML-–∞–Ω–∏–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ —Ñ–ª–∞–≥–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        middle_path = self._render_text_image(short_text, (self.width, middle_h), self.middle_bg)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("üß© –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—á–µ–Ω (max readability)")
        middle_clip = ImageClip(middle_path).with_duration(self.duration)

        date_str = datetime.now().strftime('%d.%m.%Y')
        footer_img = self._render_footer_image(date_str, source_text, (self.width, footer_h), self.footer_bg)
        footer_clip = ImageClip(footer_img).with_duration(self.duration)

        base = ColorClip(size=(self.width, self.height), color=(0, 0, 0)).with_duration(self.duration)
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã ¬´—Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —É–¥–∞—Ä–∞¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã
        margin_x = int(self.width * 0.10)
        rail_width = self.width - 2 * margin_x
        rail_y = header_h + int(middle_h * 0.08)
        rail_clip = ColorClip(size=(rail_width, 2), color=(255, 255, 255)).with_duration(self.duration).with_opacity(0.22)
        rail_clip = rail_clip.with_position((margin_x, rail_y))

        # –ö–∞–¥—Ä–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞ (–≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –∫–æ–Ω—Ñ–∏–≥—É)
        hb_height = max(20, int(middle_h * self.heartbeat_height_ratio))
        heartbeat_clip = None
        if self.heartbeat_enabled:
            heartbeat_clip = self._make_heartbeat_overlay(rail_width, hb_height)
            heartbeat_clip = heartbeat_clip.with_position((margin_x, rail_y - hb_height // 2 + 1))

        composed = CompositeVideoClip([
            base,
            header_clip.with_position((0, 0)),
            middle_clip.with_position((0, header_h)),
            rail_clip,
            *( [heartbeat_clip] if heartbeat_clip is not None else [] ),
            footer_clip.with_position((0, header_h + middle_h)),
        ], size=(self.width, self.height))

        # Audio
        music = random_file(self.config['PATHS']['music_dir'], ('.mp3', '.wav', '.m4a', '.aac'))
        if music:
            try:
                audio_clip = AudioFileClip(music)
                audio_duration = audio_clip.duration
                logger.info("üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª: %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.2f —Å–µ–∫, –Ω—É–∂–Ω–æ: %.2f —Å–µ–∫", 
                           Path(music).name, audio_duration, self.duration)
                
                if audio_duration >= self.duration:
                    # –ê—É–¥–∏–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º
                    audio = audio_clip.subclipped(0, self.duration)
                    logger.info("‚úÇÔ∏è –û–±—Ä–µ–∑–∞–ª–∏ –∞—É–¥–∏–æ –¥–æ %.2f —Å–µ–∫—É–Ω–¥", self.duration)
                else:
                    # –ê—É–¥–∏–æ –∫–æ—Ä–æ—Ç–∫–æ–µ - –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º
                    loops_needed = int(self.duration / audio_duration) + 1
                    audio_clips = [audio_clip] * loops_needed
                    audio = concatenate_audioclips(audio_clips).subclipped(0, self.duration)
                    logger.info("üîÅ –ó–∞—Ü–∏–∫–ª–∏–ª–∏ –∞—É–¥–∏–æ %d —Ä–∞–∑ –¥–ª—è %.2f —Å–µ–∫—É–Ω–¥", loops_needed, self.duration)
                
                composed = composed.with_audio(audio)
            except Exception as e:
                logger.warning("Failed to attach audio: %s", e)

        out = Path(output_path)
        out.parent.mkdir(parents=True, exist_ok=True)
        await asyncio.to_thread(
            composed.write_videofile,
            str(out),
            fps=30,
            codec='libx264',
            audio_codec='aac',
            preset='medium',
            threads=os.cpu_count() or 2,
        )
        return str(out)


def _wrap_text(draw: ImageDraw.ImageDraw, text: str, font: ImageFont.ImageFont, max_width: int) -> list[str]:
    words = text.strip().split()
    lines: list[str] = []
    current: list[str] = []
    for word in words:
        trial = (" ".join(current + [word])).strip()
        w = draw.textbbox((0,0), trial, font=font)[2]
        if w <= max_width or not current:
            current.append(word)
        else:
            lines.append(" ".join(current))
            current = [word]
    if current:
        lines.append(" ".join(current))
    return lines

